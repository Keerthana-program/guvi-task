-- Create a database named 'ecommerce'
CREATE DATABASE ecommerce;

-- Create the 'customers' table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL, 
    email VARCHAR(100) UNIQUE NOT NULL, 
    address VARCHAR(255) NOT NULL
);

-- Create the 'orders' table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    customer_id INT, 
    order_date DATE, 
    total_amount DECIMAL(10, 2), 
    FOREIGN KEY (customer_id) REFERENCES customers(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

-- Create the 'products' table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL, 
    price DECIMAL(10, 2) NOT NULL, 
    description TEXT
);

-- Insert sample data into 'customers' table
INSERT INTO customers (name, email, address) VALUES 
('Krishna', 'Krishna@example.com', '123 Abc St'), 
('Radha', 'Radha@example.com', '456 Efg St'), 
('Rama', 'charlie@example.com', '789 Hij St');

-- Insert sample data into 'products' table
INSERT INTO products (name, price, description) VALUES 
('Product A', 25.00, 'Description of Product A'), 
('Product B', 35.00, 'Description of Product B'), 
('Product C', 50.00, 'Description of Product C'), 
('Product D', 75.00, 'Description of Product D');

-- Insert sample data into 'orders' table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES 
(1, CURDATE() - INTERVAL 10 DAY, 100.00), 
(2, CURDATE() - INTERVAL 20 DAY, 200.00), 
(3, CURDATE() - INTERVAL 40 DAY, 300.00); -- This order is outside the 30-day range

-- Add a new 'discount' column to the 'products' table
ALTER TABLE products 
ADD discount DECIMAL(5, 2) DEFAULT 0.00;

-- Create 'order_items' table to normalize the database
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    order_id INT, 
    product_id INT, 
    quantity INT NOT NULL, 
    price DECIMAL(10, 2) NOT NULL, 
    FOREIGN KEY (order_id) REFERENCES orders(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE, 
    FOREIGN KEY (product_id) REFERENCES products(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

-- Get customers who have placed orders in the last 30 days
SELECT DISTINCT c.name 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Calculate the total order amount for each customer
SELECT c.name, SUM(o.total_amount) AS total_spent 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
GROUP BY c.name;

-- Update the price of 'Product C' to 45.00
UPDATE products 
SET price = 45.00 
WHERE name = 'Product C';

-- Display the price of 'Product C'
SELECT * 
FROM products
WHERE name = 'Product C';

-- Display the Product table with discount
SELECT * FROM products;

-- Get the top 3 most expensive products
SELECT name, price 
FROM products 
ORDER BY price DESC 
LIMIT 3;

-- Get names of customers who ordered 'Product A'
-- This requires an order_items table (which we will create later) to track order-product relationships

SELECT DISTINCT c.name 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
JOIN order_items oi ON o.id = oi.order_id 
JOIN products p ON oi.product_id = p.id 
WHERE p.name = 'Product A';

-- Join 'orders' with 'customers' to get the customer's name and order date
SELECT c.name, o.order_date 
FROM customers c 
JOIN orders o ON c.id = o.customer_id;

-- Get orders with a total amount greater than 150.00
SELECT * 
FROM orders 
WHERE total_amount > 150.00;

-- Calculate the total order amount for each order (now calculated using the 'order_items' table)
SELECT o.id, SUM(oi.price * oi.quantity) AS total_amount 
FROM orders o 
JOIN order_items oi ON o.id = oi.order_id 
GROUP BY o.id;

SELECT AVG(total_amount) AS average_total 
FROM orders;


