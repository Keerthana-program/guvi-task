-- Create a database named 'ecommerce'
CREATE DATABASE ecommerce;

-- Create the 'customers' table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL, 
    email VARCHAR(100) UNIQUE NOT NULL, 
    address VARCHAR(255) NOT NULL
);

-- Create the 'orders' table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    customer_id INT, 
    order_date DATE, 
    total_amount DECIMAL(10, 2), 
    FOREIGN KEY (customer_id) REFERENCES customers(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

-- Create the 'products' table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL, 
    price DECIMAL(10, 2) NOT NULL, 
    description TEXT
);

-- Insert sample data into 'customers' table
INSERT INTO customers (name, email, address) VALUES 
('Krishna', 'Krishna@example.com', '123 Abc St'), 
('Radha', 'Radha@example.com', '456 Efg St'), 
('Rama', 'charlie@example.com', '789 Hij St');

-- Insert sample data into 'products' table
INSERT INTO products (name, price, description) VALUES 
('Product A', 25.00, 'Description of Product A'), 
('Product B', 35.00, 'Description of Product B'), 
('Product C', 50.00, 'Description of Product C'), 
('Product D', 75.00, 'Description of Product D');

-- Insert sample data into 'orders' table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES 
(1, CURDATE() - INTERVAL 10 DAY, 100.00), 
(2, CURDATE() - INTERVAL 20 DAY, 200.00), 
(3, CURDATE() - INTERVAL 40 DAY, 300.00); -- This order is outside the 30-day range

-- Add a new 'discount' column to the 'products' table
ALTER TABLE products 
ADD discount DECIMAL(5, 2) DEFAULT 0.00;

-- Create 'order_items' table to normalize the database
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    order_id INT, 
    product_id INT, 
    quantity INT NOT NULL, 
    price DECIMAL(10, 2) NOT NULL, 
    FOREIGN KEY (order_id) REFERENCES orders(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE, 
    FOREIGN KEY (product_id) REFERENCES products(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

