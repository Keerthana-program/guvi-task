-- Get customers who have placed orders in the last 30 days
SELECT DISTINCT c.name 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Calculate the total order amount for each customer
SELECT c.name, SUM(o.total_amount) AS total_spent 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
GROUP BY c.name;

-- Update the price of 'Product C' to 45.00
UPDATE products 
SET price = 45.00 
WHERE name = 'Product C';

-- Display the price of 'Product C'
SELECT * 
FROM products
WHERE name = 'Product C';

-- Display the Product table with discount
SELECT * FROM products;

-- Get the top 3 most expensive products
SELECT name, price 
FROM products 
ORDER BY price DESC 
LIMIT 3;

-- Get names of customers who ordered 'Product A'
-- This requires an order_items table (which we will create later) to track order-product relationships

SELECT DISTINCT c.name 
FROM customers c 
JOIN orders o ON c.id = o.customer_id 
JOIN order_items oi ON o.id = oi.order_id 
JOIN products p ON oi.product_id = p.id 
WHERE p.name = 'Product A';

-- Join 'orders' with 'customers' to get the customer's name and order date
SELECT c.name, o.order_date 
FROM customers c 
JOIN orders o ON c.id = o.customer_id;

-- Get orders with a total amount greater than 150.00
SELECT * 
FROM orders 
WHERE total_amount > 150.00;

-- Calculate the total order amount for each order (now calculated using the 'order_items' table)
SELECT o.id, SUM(oi.price * oi.quantity) AS total_amount 
FROM orders o 
JOIN order_items oi ON o.id = oi.order_id 
GROUP BY o.id;

SELECT AVG(total_amount) AS average_total 
FROM orders;


